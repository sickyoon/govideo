// AUTOGENERATED FILE: easyjson marshaler/unmarshalers.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson52202312DecodeGithubComSickyoonGovideoGovideoModels(in *jlexer.Lexer, out *MediaList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Media, 0, 1)
					} else {
						out.Data = []Media{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Media
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52202312EncodeGithubComSickyoonGovideoGovideoModels(out *jwriter.Writer, in MediaList) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Data\":")
	if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Data {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Count\":")
	out.Int(int(in.Count))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MediaList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52202312EncodeGithubComSickyoonGovideoGovideoModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MediaList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52202312EncodeGithubComSickyoonGovideoGovideoModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MediaList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52202312DecodeGithubComSickyoonGovideoGovideoModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MediaList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52202312DecodeGithubComSickyoonGovideoGovideoModels(l, v)
}
func easyjson52202312DecodeGithubComSickyoonGovideoGovideoModels1(in *jlexer.Lexer, out *Media) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "subtitle":
			out.Subtitle = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "mimetype":
			out.Mimetype = string(in.String())
		case "extension":
			out.Extension = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "access":
			if in.IsNull() {
				in.Skip()
				out.Access = nil
			} else {
				in.Delim('[')
				if out.Access == nil {
					if !in.IsDelim(']') {
						out.Access = make([]string, 0, 4)
					} else {
						out.Access = []string{}
					}
				} else {
					out.Access = (out.Access)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Access = append(out.Access, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "added":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Added).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52202312EncodeGithubComSickyoonGovideoGovideoModels1(out *jwriter.Writer, in Media) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"subtitle\":")
	out.String(string(in.Subtitle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mimetype\":")
	out.String(string(in.Mimetype))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"extension\":")
	out.String(string(in.Extension))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"size\":")
	out.Int64(int64(in.Size))
	if len(in.Access) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"access\":")
		if in.Access == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Access {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"added\":")
	out.Raw((in.Added).MarshalJSON())
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Media) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52202312EncodeGithubComSickyoonGovideoGovideoModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Media) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52202312EncodeGithubComSickyoonGovideoGovideoModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Media) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52202312DecodeGithubComSickyoonGovideoGovideoModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Media) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52202312DecodeGithubComSickyoonGovideoGovideoModels1(l, v)
}
